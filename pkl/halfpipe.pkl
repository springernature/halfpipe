module halfpipe

typealias Platform = "concourse" | "actions"

abstract class Task {
  fixed type: String
  name: String?
  timeout: Duration(isBetween(1.s, 60.min)) = 5.min
  retries: Int(isBetween(0,4)) = 0
}

class Run extends Task {
  fixed type = "run"
  script: String
}

class DockerCompose extends Task {
  fixed type = "docker-compose"
  local fileExists = (path) -> read?("file:\(path)") != null
  path: String(fileExists) = "docker-compose.yml"
  command: String?
}

class Parallel extends Task {
  fixed type = "parallel"
  tasks: Listing<Task>(!isEmpty)
}

class Sequence extends Task {
  fixed type = "sequence"
  tasks: Listing<Task>(!isEmpty)
}

team: String
pipeline: String
/// platform is the target CI system
platform: Platform
tasks: Listing<Task>(!isEmpty)

output {
  renderer = new YamlRenderer {
    converters {
      [Duration] = (d) -> d.isoString
    }
  }
}
