# Generated using halfpipe cli version 0.0.0-DEV
resources:
- name: git
  type: git
  source:
    branch: master
    paths:
    - e2e/update-pipeline
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  check_every: 10m
- name: artifacts
  type: gcp-resource
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-update-pipeline
    json_key: ((halfpipe-artifacts.private_key))
  check_every: 24h
- name: artifacts-on-failure
  type: gcp-resource
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-update-pipeline
    json_key: ((halfpipe-artifacts.private_key))
  check_every: 24h
- name: version
  type: semver
  source:
    bucket: ((halfpipe-semver.bucket))
    driver: gcs
    json_key: ((halfpipe-semver.private_key))
    key: halfpipe-team-halfpipe-e2e-update-pipeline
- name: halfpipe-fly
  type: docker-image
  source:
    password: verysecret
    repository: springerplatformengineering/halfpipe-fly
    username: rob
  check_every: 24h
- name: CF dev-api halfpipe-team dev
  type: cf-resource
  source:
    api: dev-api
    org: halfpipe-team
    password: very-secret
    space: dev
    username: michiel
  check_every: 24h
- name: CF snpaas pe staging
  type: cf-resource
  source:
    api: ((cloudfoundry.api-snpaas))
    org: pe
    password: very-secret
    space: staging
    username: michiel
  check_every: 24h
- name: CF snpaas qa
  type: cf-resource
  source:
    api: ((cloudfoundry.api-snpaas))
    org: ((cloudfoundry.org-snpaas))
    password: ((cloudfoundry.password-snpaas))
    space: qa
    username: ((cloudfoundry.username-snpaas))
  check_every: 24h
resource_types:
- name: gcp-resource
  type: registry-image
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/gcp-resource
    tag: stable
    username: _json_key
- name: cf-resource
  type: registry-image
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/cf-resource-v2
    tag: stable
    username: _json_key
jobs:
- name: update
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: halfpipe update
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-auto-update
          tag: latest
          username: _json_key
      params:
        CONCOURSE_PASSWORD: ((concourse.password))
        CONCOURSE_TEAM: ((concourse.team))
        CONCOURSE_URL: ((concourse.url))
        CONCOURSE_USERNAME: ((concourse.username))
        HALFPIPE_DOMAIN: halfpipe.io
        HALFPIPE_PROJECT: halfpipe-io
        PIPELINE_NAME: halfpipe-e2e-update-pipeline
      run:
        path: update-pipeline
        dir: git/e2e/update-pipeline
      inputs:
      - name: git
    timeout: 1h
    attempts: 2
  - put: version
    params:
      bump: minor
    timeout: 1h
    attempts: 2
- name: Test
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  on_failure:
    in_parallel:
      steps:
      - put: artifacts-on-failure
        params:
          folder: artifacts-out-failure
          postfix: failure
          version_file: git/.git/ref
        attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - update
        attempts: 2
      - get: version
        passed:
        - update
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: Test
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: node
          tag: 9.5.0-alpine
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      run:
        path: /bin/sh
        args:
        - -c
        - |-
          if ! which bash > /dev/null; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact .halfpipe.io.yml ../../../artifacts-out-failure/e2e/update-pipeline
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact target/distribution ../../../artifacts-out/e2e/update-pipeline/target
          copyArtifact README.md ../../../artifacts-out/e2e/update-pipeline
        dir: git/e2e/update-pipeline
      inputs:
      - name: git
      - name: version
      outputs:
      - name: artifacts-out
      - name: artifacts-out-failure
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  - put: artifacts
    params:
      folder: artifacts-out
      version_file: git/.git/ref
    timeout: 1h
    attempts: 2
- name: deploy to cf
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    put: cf halfpipe-cleanup
    resource: CF dev-api halfpipe-team dev
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 5m
    timeout: 5m
    attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - Test
        attempts: 2
      - get: version
        passed:
        - Test
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 5m
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-update-pipeline
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 5m
    attempts: 2
  - put: cf halfpipe-push
    resource: CF dev-api halfpipe-team dev
    params:
      appPath: artifacts/e2e/update-pipeline/target/distribution/artifact.zip
      buildVersionPath: version/version
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    timeout: 5m
    attempts: 2
  - put: cf halfpipe-check
    resource: CF dev-api halfpipe-team dev
    params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 5m
    timeout: 5m
    attempts: 2
  - put: cf halfpipe-promote
    resource: CF dev-api halfpipe-team dev
    params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    timeout: 5m
    attempts: 2
- name: deploy to staging
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    put: cf halfpipe-cleanup
    resource: CF snpaas pe staging
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - deploy to cf
        attempts: 2
      - get: version
        passed:
        - deploy to cf
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-update-pipeline
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
    attempts: 2
  - put: cf halfpipe-push
    resource: CF snpaas pe staging
    params:
      appPath: git/e2e/update-pipeline
      buildVersionPath: version/version
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: springernature.app
      timeout: 1h
      vars:
        A: "0.1"
        B: "false"
    timeout: 1h
    attempts: 2
  - put: cf halfpipe-check
    resource: CF snpaas pe staging
    params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  - in_parallel:
      steps:
      - do:
        - task: run smoke-test.sh
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                password: ((halfpipe-gcr.private_key))
                repository: eu.gcr.io/halfpipe-io/halfpipe-fly
                tag: latest
                username: _json_key
            params:
              A: blah
              ARTIFACTORY_PASSWORD: ((artifactory.password))
              ARTIFACTORY_URL: ((artifactory.url))
              ARTIFACTORY_USERNAME: ((artifactory.username))
              TEST_ROUTE: halfpipe-example-kotlin-dev-staging-CANDIDATE.springernature.app
            run:
              path: /bin/sh
              args:
              - -c
              - |
                if ! which bash > /dev/null; then
                  echo "WARNING: Bash is not present in the docker image"
                  echo "If your script depends on bash you will get a strange error message like:"
                  echo "  sh: yourscript.sh: command not found"
                  echo "To fix, make sure your docker image contains bash!"
                  echo ""
                  echo ""
                fi

                if [ -e /etc/alpine-release ]
                then
                  echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                  echo "There is a known issue where DNS resolving does not work as expected"
                  echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                  echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                  echo "we recommend debian:stretch-slim as an alternative"
                  echo ""
                  echo ""
                fi

                # Copying in artifacts from previous task
                cp -r ../../../artifacts/. ../..

                export GIT_REVISION=`cat ../../.git/ref`
                export BUILD_VERSION=`cat ../../../version/version`

                ./smoke-test.sh
                EXIT_STATUS=$?
                if [ $EXIT_STATUS != 0 ] ; then
                  exit 1
                fi
              dir: git/e2e/update-pipeline
            inputs:
            - name: git
            - name: artifacts
            - name: version
            caches:
            - path: ../../../var/halfpipe/cache
            - path: ../../../halfpipe-cache
          attempts: 1
      - do:
        - task: c-name
          privileged: true
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                password: ((halfpipe-gcr.private_key))
                repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
                tag: stable
                username: _json_key
            params:
              ARTIFACTORY_PASSWORD: ((artifactory.password))
              ARTIFACTORY_URL: ((artifactory.url))
              ARTIFACTORY_USERNAME: ((artifactory.username))
              CONSUMER_GIT_KEY: ((halfpipe-github.private_key))
              CONSUMER_GIT_URI: git@github.com:springernature/c-consumer
              CONSUMER_HOST: c-host
              CONSUMER_PATH: ""
              CONSUMER_SCRIPT: /var/c-script
              DOCKER_COMPOSE_SERVICE: ""
              GCR_PRIVATE_KEY: ((halfpipe-gcr.private_key))
              GIT_CLONE_OPTIONS: ""
              PROVIDER_HOST: halfpipe-example-kotlin-dev-staging-CANDIDATE.springernature.app
              PROVIDER_HOST_KEY: HALFPIPE_E2E_UPDATE_PIPELINE_DEPLOYED_HOST
              PROVIDER_NAME: halfpipe-e2e-update-pipeline
            run:
              path: docker.sh
              args:
              - -c
              - |
                if [ -e /etc/alpine-release ]
                then
                  echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                  echo "There is a known issue where DNS resolving does not work as expected"
                  echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                  echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                  echo "we recommend debian:stretch-slim as an alternative"
                  echo ""
                  echo ""
                fi

                export GIT_REVISION=`cat ../../.git/ref`
                export BUILD_VERSION=`cat ../../../version/version`

                \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io

                # write git key to file
                echo "${CONSUMER_GIT_KEY}" > .gitkey
                chmod 600 .gitkey

                set -ex

                # get current revision of consumer, revert to HEAD if not found
                REVISION=$(curl -fsSL "${CONSUMER_HOST}/internal/version" | jq -r '.revision' || echo "")
                if [ "${REVISION}" == "" ]; then
                  echo "Error fetching version of consumer from ${CONSUMER_HOST}/internal/version - using HEAD instead."
                  REVISION=HEAD
                fi

                # clone consumer into "consumer-repo" dir
                GIT_SSH_COMMAND="ssh -o StrictHostKeychecking=no -i .gitkey" git clone ${GIT_CLONE_OPTIONS} ${CONSUMER_GIT_URI} consumer-repo
                cd consumer-repo/${CONSUMER_PATH}

                # checkout revision
                git checkout ${REVISION}

                # run the tests with docker-compose
                # note: old system reads CF manifest env vars and sets them all here
                docker-compose run --no-deps \
                  --entrypoint "${CONSUMER_SCRIPT}" \
                  -e DEPENDENCY_NAME=${PROVIDER_NAME} \
                  -e ${PROVIDER_HOST_KEY}=${PROVIDER_HOST} \
                  -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME \
                  -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache \
                  ${DOCKER_COMPOSE_SERVICE:-code}

                EXIT_STATUS=$?
                if [ $EXIT_STATUS != 0 ] ; then
                  exit 1
                fi
              dir: git/e2e/update-pipeline
            inputs:
            - name: git
            - name: version
            caches:
            - path: ../../../var/halfpipe/cache
            - path: ../../../halfpipe-cache
          attempts: 1
    timeout: 1h
  - put: cf halfpipe-promote
    resource: CF snpaas pe staging
    params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    timeout: 1h
    attempts: 2
- name: deploy to qa
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    put: cf halfpipe-cleanup
    resource: CF snpaas qa
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - deploy to cf
        attempts: 2
      - get: version
        passed:
        - deploy to cf
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-update-pipeline
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
    attempts: 2
  - put: cf halfpipe-push
    resource: CF snpaas qa
    params:
      appPath: git/e2e/update-pipeline
      buildVersionPath: version/version
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: springernature.app
      timeout: 1h
      vars:
        A: "0.1"
        B: "false"
    timeout: 1h
    attempts: 2
  - put: cf halfpipe-check
    resource: CF snpaas qa
    params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  - do:
    - task: save-artifact-in-pre-promote
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            password: ((halfpipe-gcr.private_key))
            repository: eu.gcr.io/halfpipe-io/halfpipe-fly
            tag: latest
            username: _json_key
        params:
          A: blah
          ARTIFACTORY_PASSWORD: ((artifactory.password))
          ARTIFACTORY_URL: ((artifactory.url))
          ARTIFACTORY_USERNAME: ((artifactory.username))
          TEST_ROUTE: halfpipe-example-kotlin-dev-qa-CANDIDATE.springernature.app
        run:
          path: /bin/sh
          args:
          - -c
          - |-
            if ! which bash > /dev/null; then
              echo "WARNING: Bash is not present in the docker image"
              echo "If your script depends on bash you will get a strange error message like:"
              echo "  sh: yourscript.sh: command not found"
              echo "To fix, make sure your docker image contains bash!"
              echo ""
              echo ""
            fi

            if [ -e /etc/alpine-release ]
            then
              echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
              echo "There is a known issue where DNS resolving does not work as expected"
              echo "https://github.com/gliderlabs/docker-alpine/issues/255"
              echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
              echo "we recommend debian:stretch-slim as an alternative"
              echo ""
              echo ""
            fi

            copyArtifact() {
              ARTIFACT=$1
              ARTIFACT_OUT_PATH=$2

              if [ -e $ARTIFACT ] ; then
                mkdir -p $ARTIFACT_OUT_PATH
                cp -r $ARTIFACT $ARTIFACT_OUT_PATH
              else
                echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
                exit 1
              fi
            }

            export GIT_REVISION=`cat ../../.git/ref`
            export BUILD_VERSION=`cat ../../../version/version`

            ./smoke-test.sh
            EXIT_STATUS=$?
            if [ $EXIT_STATUS != 0 ] ; then
              exit 1
            fi

            # Artifacts to copy from task
            copyArtifact build ../../../artifacts-out/e2e/update-pipeline
          dir: git/e2e/update-pipeline
        inputs:
        - name: git
        - name: version
        outputs:
        - name: artifacts-out
        caches:
        - path: ../../../var/halfpipe/cache
        - path: ../../../halfpipe-cache
      attempts: 1
    - put: artifacts
      params:
        folder: artifacts-out
        version_file: git/.git/ref
      attempts: 2
    timeout: 1h
  - do:
    - task: restore artifact in pre promote
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            password: ((halfpipe-gcr.private_key))
            repository: eu.gcr.io/halfpipe-io/halfpipe-fly
            tag: latest
            username: _json_key
        params:
          A: blah
          ARTIFACTORY_PASSWORD: ((artifactory.password))
          ARTIFACTORY_URL: ((artifactory.url))
          ARTIFACTORY_USERNAME: ((artifactory.username))
          TEST_ROUTE: halfpipe-example-kotlin-dev-qa-CANDIDATE.springernature.app
        run:
          path: /bin/sh
          args:
          - -c
          - |
            if ! which bash > /dev/null; then
              echo "WARNING: Bash is not present in the docker image"
              echo "If your script depends on bash you will get a strange error message like:"
              echo "  sh: yourscript.sh: command not found"
              echo "To fix, make sure your docker image contains bash!"
              echo ""
              echo ""
            fi

            if [ -e /etc/alpine-release ]
            then
              echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
              echo "There is a known issue where DNS resolving does not work as expected"
              echo "https://github.com/gliderlabs/docker-alpine/issues/255"
              echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
              echo "we recommend debian:stretch-slim as an alternative"
              echo ""
              echo ""
            fi

            # Copying in artifacts from previous task
            cp -r ../../../artifacts/. ../..

            export GIT_REVISION=`cat ../../.git/ref`
            export BUILD_VERSION=`cat ../../../version/version`

            ./smoke-test.sh
            EXIT_STATUS=$?
            if [ $EXIT_STATUS != 0 ] ; then
              exit 1
            fi
          dir: git/e2e/update-pipeline
        inputs:
        - name: git
        - name: artifacts
        - name: version
        caches:
        - path: ../../../var/halfpipe/cache
        - path: ../../../halfpipe-cache
      attempts: 1
    timeout: 1h
  - put: cf halfpipe-promote
    resource: CF snpaas qa
    params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    timeout: 1h
    attempts: 2
- name: push to docker registry
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - deploy to staging
        - deploy to qa
        attempts: 2
      - get: version
        passed:
        - deploy to staging
        - deploy to qa
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - put: halfpipe-fly
    params:
      build: git/e2e/update-pipeline
      build_args:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: b
      dockerfile: git/e2e/update-pipeline/Dockerfile
      tag_as_latest: true
      tag_file: version/number
    timeout: 1h
    attempts: 1
- name: run notify.sh
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - push to docker registry
        attempts: 2
      - get: version
        passed:
        - push to docker registry
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: run notify.sh
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: blah
          repository: busy
          tag: latest
          username: michiel
      params:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: b
      run:
        path: /bin/sh
        args:
        - -c
        - |
          if ! which bash > /dev/null; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          ./notify.sh
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/update-pipeline
      inputs:
      - name: git
      - name: version
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
- name: docker-compose
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  on_failure:
    in_parallel:
      steps:
      - put: artifacts-on-failure
        params:
          folder: artifacts-out-failure
          postfix: failure
          version_file: git/.git/ref
        attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - run notify.sh
        attempts: 2
      - get: version
        passed:
        - run notify.sh
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: docker-compose
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
          tag: stable
          username: _json_key
      params:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        GCR_PRIVATE_KEY: ((halfpipe-gcr.private_key))
        HALFPIPE_CACHE_TEAM: halfpipe-team
      run:
        path: docker.sh
        args:
        - -c
        - |
          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io
          docker-compose  run -e A -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME -e BUILD_VERSION -e GIT_REVISION -e HALFPIPE_CACHE_TEAM -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache app

          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact docker-compose.yml ../../../artifacts-out-failure/e2e/update-pipeline
            exit 1
          fi
        dir: git/e2e/update-pipeline
      inputs:
      - name: git
      - name: version
      outputs:
      - name: artifacts-out-failure
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
- name: another-c-name
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - docker-compose
        attempts: 2
      - get: version
        passed:
        - docker-compose
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: another-c-name
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
          tag: stable
          username: _json_key
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        CONSUMER_GIT_KEY: ((halfpipe-github.private_key))
        CONSUMER_GIT_URI: git@github.com:springernature/c-consumer
        CONSUMER_HOST: c-host
        CONSUMER_PATH: ""
        CONSUMER_SCRIPT: c-script
        DOCKER_COMPOSE_SERVICE: potato
        GCR_PRIVATE_KEY: ((halfpipe-gcr.private_key))
        GIT_CLONE_OPTIONS: ""
        K: value
        K1: value1
        PROVIDER_HOST: p-host
        PROVIDER_HOST_KEY: HALFPIPE_E2E_UPDATE_PIPELINE_DEPLOYED_HOST
        PROVIDER_NAME: halfpipe-e2e-update-pipeline
      run:
        path: docker.sh
        args:
        - -c
        - |
          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io

          # write git key to file
          echo "${CONSUMER_GIT_KEY}" > .gitkey
          chmod 600 .gitkey

          set -ex

          # get current revision of consumer, revert to HEAD if not found
          REVISION=$(curl -fsSL "${CONSUMER_HOST}/internal/version" | jq -r '.revision' || echo "")
          if [ "${REVISION}" == "" ]; then
            echo "Error fetching version of consumer from ${CONSUMER_HOST}/internal/version - using HEAD instead."
            REVISION=HEAD
          fi

          # clone consumer into "consumer-repo" dir
          GIT_SSH_COMMAND="ssh -o StrictHostKeychecking=no -i .gitkey" git clone ${GIT_CLONE_OPTIONS} ${CONSUMER_GIT_URI} consumer-repo
          cd consumer-repo/${CONSUMER_PATH}

          # checkout revision
          git checkout ${REVISION}

          # run the tests with docker-compose
          # note: old system reads CF manifest env vars and sets them all here
          docker-compose run --no-deps \
            --entrypoint "${CONSUMER_SCRIPT}" \
            -e DEPENDENCY_NAME=${PROVIDER_NAME} \
            -e ${PROVIDER_HOST_KEY}=${PROVIDER_HOST} \
            -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME -e K -e K1 \
            -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache \
            ${DOCKER_COMPOSE_SERVICE:-code}

          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/update-pipeline
      inputs:
      - name: git
      - name: version
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
- name: deploy-ml-zip
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - another-c-name
        attempts: 2
      - get: version
        passed:
        - another-c-name
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-update-pipeline
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
    attempts: 2
  - task: deploy-ml-zip
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-ml-deploy
          tag: latest
          username: _json_key
      params:
        APP_NAME: halfpipe-e2e-update-pipeline
        DEPLOY_ZIP: target/xquery.zip
        MARKLOGIC_HOST: ml.dev.springer-sbm.com
        MARKLOGIC_PASSWORD: ((halfpipe-ml-deploy.password))
        MARKLOGIC_USERNAME: ((halfpipe-ml-deploy.username))
        USE_BUILD_VERSION: "false"
      run:
        path: /bin/sh
        args:
        - -c
        - |
          if ! which bash > /dev/null; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          # Copying in artifacts from previous task
          cp -r ../../../artifacts/. ../..

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          /ml-deploy/deploy-local-zip
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/update-pipeline
      inputs:
      - name: git
      - name: artifacts
      - name: version
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
- name: Deploy ml-modules artifact
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - deploy-ml-zip
        attempts: 2
      - get: version
        passed:
        - deploy-ml-zip
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: Deploy ml-modules artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-ml-deploy
          tag: latest
          username: _json_key
      params:
        APP_NAME: my-app
        APP_VERSION: v1
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        MARKLOGIC_HOST: ml.dev.springer-sbm.com,ml.qa1.springer-sbm.com
        MARKLOGIC_PASSWORD: ((halfpipe-ml-deploy.password))
        MARKLOGIC_USERNAME: ((halfpipe-ml-deploy.username))
        ML_MODULES_VERSION: "2.1425"
        USE_BUILD_VERSION: "false"
      run:
        path: /bin/sh
        args:
        - -c
        - |
          if ! which bash > /dev/null; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          /ml-deploy/deploy-ml-modules
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/update-pipeline
      inputs:
      - name: git
      - name: version
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1

