# Generated using halfpipe cli version 0.0.0-DEV
resources:
- name: git
  type: git
  source:
    branch: master
    paths:
    - e2e/deploy-cf-docker-image
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  check_every: 10m
- name: version
  type: semver
  source:
    bucket: ((halfpipe-semver.bucket))
    driver: gcs
    json_key: ((halfpipe-semver.private_key))
    key: halfpipe-team-halfpipe-e2e-deploy-cf-docker-image
- name: CF snpaas dev
  type: cf-resource
  source:
    api: ((cloudfoundry.api-snpaas))
    org: ((cloudfoundry.org-snpaas))
    password: ((cloudfoundry.password-snpaas))
    space: dev
    username: ((cloudfoundry.username-snpaas))
  check_every: 24h
- name: rolling cf snpaas dev
  type: cf-resource
  source:
    api: ((cloudfoundry.api-snpaas))
    org: ((cloudfoundry.org-snpaas))
    password: ((cloudfoundry.password-snpaas))
    space: dev
    username: ((cloudfoundry.username-snpaas))
  check_every: 24h
resource_types:
- name: cf-resource
  type: registry-image
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/cf-resource-v2
    tag: stable
    username: _json_key
jobs:
- name: update
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: halfpipe update
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-auto-update
          tag: latest
          username: _json_key
      params:
        CONCOURSE_PASSWORD: ((concourse.password))
        CONCOURSE_TEAM: ((concourse.team))
        CONCOURSE_URL: ((concourse.url))
        CONCOURSE_USERNAME: ((concourse.username))
        HALFPIPE_DOMAIN: halfpipe.io
        HALFPIPE_PROJECT: halfpipe-io
        PIPELINE_NAME: halfpipe-e2e-deploy-cf-docker-image
      run:
        path: update-pipeline
        dir: git/e2e/deploy-cf-docker-image
      inputs:
      - name: git
    timeout: 1h
    attempts: 2
  - put: version
    params:
      bump: minor
    timeout: 1h
    attempts: 2
- name: deploy to cf simple
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    put: cf halfpipe-cleanup
    resource: CF snpaas dev
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - update
        attempts: 2
      - get: version
        passed:
        - update
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - put: cf halfpipe-push
    resource: CF snpaas dev
    params:
      buildVersionPath: version/version
      cliVersion: cf6
      command: halfpipe-push
      dockerPassword: ((halfpipe-gcr.private_key))
      dockerUsername: _json_key
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    timeout: 1h
    attempts: 2
  - put: cf halfpipe-check
    resource: CF snpaas dev
    params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  - put: cf halfpipe-promote
    resource: CF snpaas dev
    params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    timeout: 1h
    attempts: 2
- name: deploy to cf with pre promote
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    put: cf halfpipe-cleanup
    resource: CF snpaas dev
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - deploy to cf simple
        attempts: 2
      - get: version
        passed:
        - deploy to cf simple
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - put: cf halfpipe-push
    resource: CF snpaas dev
    params:
      buildVersionPath: version/version
      cliVersion: cf6
      command: halfpipe-push
      dockerPassword: ((halfpipe-gcr.private_key))
      dockerTag: git/.git/ref
      dockerUsername: _json_key
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    timeout: 1h
    attempts: 2
  - put: cf halfpipe-check
    resource: CF snpaas dev
    params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  - in_parallel:
      steps:
      - do:
        - task: pre promote step
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                password: ((halfpipe-gcr.private_key))
                repository: eu.gcr.io/halfpipe-io/halfpipe-fly
                tag: latest
                username: _json_key
            params:
              A: blah
              ARTIFACTORY_PASSWORD: ((artifactory.password))
              ARTIFACTORY_URL: ((artifactory.url))
              ARTIFACTORY_USERNAME: ((artifactory.username))
              TEST_ROUTE: halfpipe-example-kotlin-dev-dev-CANDIDATE.springernature.app
            run:
              path: /bin/sh
              args:
              - -c
              - |
                if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                  echo "WARNING: Bash is not present in the docker image"
                  echo "If your script depends on bash you will get a strange error message like:"
                  echo "  sh: yourscript.sh: command not found"
                  echo "To fix, make sure your docker image contains bash!"
                  echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                  echo ""
                  echo ""
                fi

                if [ -e /etc/alpine-release ]
                then
                  echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                  echo "There is a known issue where DNS resolving does not work as expected"
                  echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                  echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                  echo "we recommend debian:stretch-slim as an alternative"
                  echo ""
                  echo ""
                fi

                export GIT_REVISION=`cat ../../.git/ref`
                export BUILD_VERSION=`cat ../../../version/version`

                ./smoke-test.sh
                EXIT_STATUS=$?
                if [ $EXIT_STATUS != 0 ] ; then
                  exit 1
                fi
              dir: git/e2e/deploy-cf-docker-image
            inputs:
            - name: git
            - name: version
            caches:
            - path: ../../../var/halfpipe/cache
            - path: ../../../halfpipe-cache
          attempts: 1
    timeout: 1h
  - put: cf halfpipe-promote
    resource: CF snpaas dev
    params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    timeout: 1h
    attempts: 2
- name: deploy to cf simple - rolling deploy
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - deploy to cf with pre promote
        attempts: 2
      - get: version
        passed:
        - deploy to cf with pre promote
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - put: cf rolling deploy
    resource: rolling cf snpaas dev
    params:
      buildVersionPath: version/version
      cliVersion: cf7
      command: halfpipe-rolling-deploy
      dockerPassword: ((halfpipe-gcr.private_key))
      dockerTag: version/version
      dockerUsername: _json_key
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
- name: deploy to cf with pre promote - rolling deploy
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - deploy to cf simple - rolling deploy
        attempts: 2
      - get: version
        passed:
        - deploy to cf simple - rolling deploy
        trigger: true
        timeout: 1m
        attempts: 2
      fail_fast: true
    timeout: 1h
  - put: deploy test app
    resource: rolling cf snpaas dev
    params:
      buildVersionPath: version/version
      cliVersion: cf6
      command: halfpipe-push
      dockerPassword: ((halfpipe-gcr.private_key))
      dockerTag: git/.git/ref
      dockerUsername: _json_key
      gitRefPath: git/.git/ref
      instances: 1
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    timeout: 1h
    attempts: 2
  - in_parallel:
      steps:
      - do:
        - task: pre promote step
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                password: ((halfpipe-gcr.private_key))
                repository: eu.gcr.io/halfpipe-io/halfpipe-fly
                tag: latest
                username: _json_key
            params:
              A: blah
              ARTIFACTORY_PASSWORD: ((artifactory.password))
              ARTIFACTORY_URL: ((artifactory.url))
              ARTIFACTORY_USERNAME: ((artifactory.username))
              TEST_ROUTE: halfpipe-example-kotlin-dev-dev-CANDIDATE.springernature.app
            run:
              path: /bin/sh
              args:
              - -c
              - |
                if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                  echo "WARNING: Bash is not present in the docker image"
                  echo "If your script depends on bash you will get a strange error message like:"
                  echo "  sh: yourscript.sh: command not found"
                  echo "To fix, make sure your docker image contains bash!"
                  echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                  echo ""
                  echo ""
                fi

                if [ -e /etc/alpine-release ]
                then
                  echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                  echo "There is a known issue where DNS resolving does not work as expected"
                  echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                  echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                  echo "we recommend debian:stretch-slim as an alternative"
                  echo ""
                  echo ""
                fi

                export GIT_REVISION=`cat ../../.git/ref`
                export BUILD_VERSION=`cat ../../../version/version`

                ./smoke-test.sh
                EXIT_STATUS=$?
                if [ $EXIT_STATUS != 0 ] ; then
                  exit 1
                fi
              dir: git/e2e/deploy-cf-docker-image
            inputs:
            - name: git
            - name: version
            caches:
            - path: ../../../var/halfpipe/cache
            - path: ../../../halfpipe-cache
          attempts: 1
    timeout: 1h
  - put: cf rolling deploy
    resource: rolling cf snpaas dev
    params:
      buildVersionPath: version/version
      cliVersion: cf7
      command: halfpipe-rolling-deploy
      dockerPassword: ((halfpipe-gcr.private_key))
      dockerTag: git/.git/ref
      dockerUsername: _json_key
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  - put: remove test app
    resource: rolling cf snpaas dev
    params:
      command: halfpipe-delete-test
      manifestPath: git/e2e/deploy-cf-docker-image/manifest.yml
    timeout: 1h
    attempts: 2

