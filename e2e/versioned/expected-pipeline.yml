# Generated using halfpipe cli version 0.0.0-DEV
groups: []
resources:
- name: git
  type: git
  source:
    branch: master
    paths:
    - e2e/versioned
    private_key: ((github.private_key))
    uri: git@github.com:springernature/halfpipe.git
- name: slack-notification
  type: slack-notification
  source:
    url: ((slack.webhook))
- name: artifacts-engineering-enablement-test
  type: gcp-resource
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: engineering-enablement/test
    json_key: ((halfpipe-artifacts.private_key))
- name: artifacts-engineering-enablement-test-on-failure
  type: gcp-resource
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: engineering-enablement/test
    json_key: ((halfpipe-artifacts.private_key))
- name: version
  type: semver
  source:
    bucket: ((halfpipe-semver.bucket))
    driver: gcs
    json_key: ((halfpipe-semver.private_key))
    key: engineering-enablement-test
- name: CF dev-api engineering-enablement dev
  type: cf-resource
  source:
    api: dev-api
    org: engineering-enablement
    password: very-secret
    space: dev
    username: michiel
- name: CF live pe staging
  type: cf-resource
  source:
    api: ((cloudfoundry.api-live))
    org: pe
    password: very-secret
    space: staging
    username: michiel
- name: CF snpaas qa
  type: cf-resource
  source:
    api: ((cloudfoundry.api-snpaas))
    org: ((cloudfoundry.org-snpaas))
    password: ((cloudfoundry.password-snpaas))
    space: qa
    username: ((cloudfoundry.username-snpaas))
- name: Docker Registry
  type: docker-image
  source:
    password: verysecret
    repository: springerplatformengineering/halfpipe-fly
    username: rob
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: v1.4.2
- name: gcp-resource
  type: docker-image
  source:
    repository: platformengineering/gcp-resource
    tag: stable
- name: cf-resource
  type: docker-image
  source:
    repository: platformengineering/cf-resource
    tag: stable
jobs:
- name: update
  plan:
  - aggregate:
    - get: git
      trigger: true
  - put: version
    params:
      bump: minor
    attempts: 2
  on_failure:
    put: slack-notification
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
- name: Test
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - update
    - get: version
      passed:
      - update
      trigger: true
    timeout: 1h
  - task: Test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: node
          tag: 9.5.0-alpine
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      run:
        path: /bin/sh
        args:
        - -c
        - |-
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2
            if [ -d $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH/$ARTIFACT
              cp -r $ARTIFACT/. $ARTIFACT_OUT_PATH/$ARTIFACT/
            elif [ -f $ARTIFACT ] ; then
              ARTIFACT_DIR=$(dirname $ARTIFACT)
              mkdir -p $ARTIFACT_OUT_PATH/$ARTIFACT_DIR
              cp $ARTIFACT $ARTIFACT_OUT_PATH/$ARTIFACT_DIR
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact .halfpipe.io.yml ../../../artifacts-out-failure
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact target/distribution ../../../artifacts-out
          copyArtifact README.md ../../../artifacts-out
        dir: git/e2e/versioned
      inputs:
      - name: git
      - name: version
      outputs:
      - name: artifacts-out
      - name: artifacts-out-failure
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  - put: artifacts
    resource: artifacts-engineering-enablement-test
    params:
      folder: artifacts-out
      version_file: git/.git/ref
    timeout: 1h
  on_failure:
    aggregate:
    - put: artifacts-on-failure
      resource: artifacts-engineering-enablement-test-on-failure
      params:
        folder: artifacts-out-failure
        postfix: failure
        version_file: git/.git/ref
    - put: slack-notification
      params:
        channel: '#ee-re'
        icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
        text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        username: Halfpipe
- name: deploy to cf
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - Test
    - get: version
      passed:
      - Test
      trigger: true
    timeout: 5m
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: platformengineering/gcp-resource
          tag: stable
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: engineering-enablement/test
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 5m
  - put: cf halfpipe-push
    resource: CF dev-api engineering-enablement dev
    params:
      appPath: artifacts/target/distribution/artifact.zip
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/versioned/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    timeout: 5m
    attempts: 2
  - put: cf halfpipe-promote
    resource: CF dev-api engineering-enablement dev
    params:
      command: halfpipe-promote
      manifestPath: git/e2e/versioned/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    timeout: 5m
    attempts: 2
  on_failure:
    aggregate:
    - put: slack-notification
      params:
        channel: '#ee-re'
        icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
        text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        username: Halfpipe
  ensure:
    put: cf halfpipe-cleanup
    resource: CF dev-api engineering-enablement dev
    params:
      command: halfpipe-cleanup
      manifestPath: git/e2e/versioned/manifest.yml
      timeout: 5m
    timeout: 5m
    attempts: 2
- name: deploy to staging
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - deploy to cf
    - get: version
      passed:
      - deploy to cf
      trigger: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: platformengineering/gcp-resource
          tag: stable
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: engineering-enablement/test
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
  - put: cf halfpipe-push
    resource: CF live pe staging
    params:
      appPath: git/e2e/versioned
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/versioned/manifest.yml
      testDomain: live.cf.private.springer.com
      timeout: 1h
      vars:
        A: "0.1"
        B: "false"
    timeout: 1h
    attempts: 2
  - aggregate:
    - do:
      - task: run smoke-test.sh
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              password: ((gcr.private_key))
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
          params:
            A: blah
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            TEST_ROUTE: halfpipe-example-kotlin-dev-staging-CANDIDATE.live.cf.private.springer.com
          run:
            path: /bin/sh
            args:
            - -c
            - |
              which bash > /dev/null
              if [ $? != 0 ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:stretch-slim as an alternative"
                echo ""
                echo ""
              fi

              # Copying in artifacts from previous task
              cp -r ../../../artifacts/. .

              export GIT_REVISION=`cat ../../.git/ref`
              export BUILD_VERSION=`cat ../../../version/version`

              ./smoke-test.sh
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/versioned
          inputs:
          - name: git
          - name: artifacts
          - name: version
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
        attempts: 1
    - do:
      - task: c-name
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              password: ((gcr.private_key))
              repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
              tag: stable
              username: _json_key
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            CONSUMER_GIT_KEY: ((github.private_key))
            CONSUMER_GIT_URI: git@github.com:springernature/c-consumer
            CONSUMER_HOST: c-host
            CONSUMER_PATH: ""
            CONSUMER_SCRIPT: /var/c-script
            DOCKER_COMPOSE_SERVICE: ""
            GCR_PRIVATE_KEY: ((gcr.private_key))
            GIT_CLONE_OPTIONS: ""
            PROVIDER_HOST: halfpipe-example-kotlin-dev-staging-CANDIDATE.live.cf.private.springer.com
            PROVIDER_HOST_KEY: TEST_DEPLOYED_HOST
            PROVIDER_NAME: test
          run:
            path: docker.sh
            args:
            - -c
            - |
              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:stretch-slim as an alternative"
                echo ""
                echo ""
              fi

              export GIT_REVISION=`cat ../../.git/ref`
              export BUILD_VERSION=`cat ../../../version/version`

              \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io

              # write git key to file
              echo "${CONSUMER_GIT_KEY}" > .gitkey
              chmod 600 .gitkey

              set -x

              # get current revision of consumer
              REVISION=$(curl "${CONSUMER_HOST}/internal/version" | jq -r '.revision')

              # clone consumer into "consumer-repo" dir
              GIT_SSH_COMMAND="ssh -o StrictHostKeychecking=no -i .gitkey" git clone ${GIT_CLONE_OPTIONS} ${CONSUMER_GIT_URI} consumer-repo
              cd consumer-repo/${CONSUMER_PATH}

              # checkout revision
              git checkout ${REVISION}

              # run the tests with docker-compose
              # note: old system reads CF manifest env vars and sets them all here
              docker-compose run --no-deps \
                --entrypoint "${CONSUMER_SCRIPT}" \
                -e DEPENDENCY_NAME=${PROVIDER_NAME} \
                -e ${PROVIDER_HOST_KEY}=${PROVIDER_HOST} -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME \
                ${DOCKER_COMPOSE_SERVICE:-code}

              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/versioned
          inputs:
          - name: git
          - name: version
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
        attempts: 1
    timeout: 1h
  - put: cf halfpipe-promote
    resource: CF live pe staging
    params:
      command: halfpipe-promote
      manifestPath: git/e2e/versioned/manifest.yml
      testDomain: live.cf.private.springer.com
      timeout: 1h
    timeout: 1h
    attempts: 2
  on_failure:
    aggregate:
    - put: slack-notification
      params:
        channel: '#ee-re'
        icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
        text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        username: Halfpipe
  ensure:
    put: cf halfpipe-cleanup
    resource: CF live pe staging
    params:
      command: halfpipe-cleanup
      manifestPath: git/e2e/versioned/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
- name: deploy to qa
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - deploy to cf
    - get: version
      passed:
      - deploy to cf
      trigger: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: platformengineering/gcp-resource
          tag: stable
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: engineering-enablement/test
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
  - put: cf halfpipe-push
    resource: CF snpaas qa
    params:
      appPath: git/e2e/versioned
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/versioned/manifest.yml
      testDomain: springernature.app
      timeout: 1h
      vars:
        A: "0.1"
        B: "false"
    timeout: 1h
    attempts: 2
  - do:
    - task: save-artifact-in-pre-promote
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            password: ((gcr.private_key))
            repository: eu.gcr.io/halfpipe-io/halfpipe-fly
            tag: latest
            username: _json_key
        params:
          A: blah
          ARTIFACTORY_PASSWORD: ((artifactory.password))
          ARTIFACTORY_URL: ((artifactory.url))
          ARTIFACTORY_USERNAME: ((artifactory.username))
          TEST_ROUTE: halfpipe-example-kotlin-dev-qa-CANDIDATE.springernature.app
        run:
          path: /bin/sh
          args:
          - -c
          - |-
            which bash > /dev/null
            if [ $? != 0 ]; then
              echo "WARNING: Bash is not present in the docker image"
              echo "If your script depends on bash you will get a strange error message like:"
              echo "  sh: yourscript.sh: command not found"
              echo "To fix, make sure your docker image contains bash!"
              echo ""
              echo ""
            fi

            if [ -e /etc/alpine-release ]
            then
              echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
              echo "There is a known issue where DNS resolving does not work as expected"
              echo "https://github.com/gliderlabs/docker-alpine/issues/255"
              echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
              echo "we recommend debian:stretch-slim as an alternative"
              echo ""
              echo ""
            fi

            copyArtifact() {
              ARTIFACT=$1
              ARTIFACT_OUT_PATH=$2
              if [ -d $ARTIFACT ] ; then
                mkdir -p $ARTIFACT_OUT_PATH/$ARTIFACT
                cp -r $ARTIFACT/. $ARTIFACT_OUT_PATH/$ARTIFACT/
              elif [ -f $ARTIFACT ] ; then
                ARTIFACT_DIR=$(dirname $ARTIFACT)
                mkdir -p $ARTIFACT_OUT_PATH/$ARTIFACT_DIR
                cp $ARTIFACT $ARTIFACT_OUT_PATH/$ARTIFACT_DIR
              else
                echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
                exit 1
              fi
            }

            export GIT_REVISION=`cat ../../.git/ref`
            export BUILD_VERSION=`cat ../../../version/version`

            ./smoke-test.sh
            EXIT_STATUS=$?
            if [ $EXIT_STATUS != 0 ] ; then
              exit 1
            fi

            # Artifacts to copy from task
            copyArtifact build ../../../artifacts-out
          dir: git/e2e/versioned
        inputs:
        - name: git
        - name: version
        outputs:
        - name: artifacts-out
        caches:
        - path: ../../../var/halfpipe/cache
        - path: ../../../halfpipe-cache
      attempts: 1
    - put: artifacts
      resource: artifacts-engineering-enablement-test
      params:
        folder: artifacts-out
        version_file: git/.git/ref
    timeout: 1h
  - do:
    - task: restore artifact in pre promote
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            password: ((gcr.private_key))
            repository: eu.gcr.io/halfpipe-io/halfpipe-fly
            tag: latest
            username: _json_key
        params:
          A: blah
          ARTIFACTORY_PASSWORD: ((artifactory.password))
          ARTIFACTORY_URL: ((artifactory.url))
          ARTIFACTORY_USERNAME: ((artifactory.username))
          TEST_ROUTE: halfpipe-example-kotlin-dev-qa-CANDIDATE.springernature.app
        run:
          path: /bin/sh
          args:
          - -c
          - |
            which bash > /dev/null
            if [ $? != 0 ]; then
              echo "WARNING: Bash is not present in the docker image"
              echo "If your script depends on bash you will get a strange error message like:"
              echo "  sh: yourscript.sh: command not found"
              echo "To fix, make sure your docker image contains bash!"
              echo ""
              echo ""
            fi

            if [ -e /etc/alpine-release ]
            then
              echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
              echo "There is a known issue where DNS resolving does not work as expected"
              echo "https://github.com/gliderlabs/docker-alpine/issues/255"
              echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
              echo "we recommend debian:stretch-slim as an alternative"
              echo ""
              echo ""
            fi

            # Copying in artifacts from previous task
            cp -r ../../../artifacts/. .

            export GIT_REVISION=`cat ../../.git/ref`
            export BUILD_VERSION=`cat ../../../version/version`

            ./smoke-test.sh
            EXIT_STATUS=$?
            if [ $EXIT_STATUS != 0 ] ; then
              exit 1
            fi
          dir: git/e2e/versioned
        inputs:
        - name: git
        - name: artifacts
        - name: version
        caches:
        - path: ../../../var/halfpipe/cache
        - path: ../../../halfpipe-cache
      attempts: 1
    timeout: 1h
  - put: cf halfpipe-promote
    resource: CF snpaas qa
    params:
      command: halfpipe-promote
      manifestPath: git/e2e/versioned/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    timeout: 1h
    attempts: 2
  on_failure:
    aggregate:
    - put: slack-notification
      params:
        channel: '#ee-re'
        icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
        text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        username: Halfpipe
  ensure:
    put: cf halfpipe-cleanup
    resource: CF snpaas qa
    params:
      command: halfpipe-cleanup
      manifestPath: git/e2e/versioned/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
- name: push to docker registry
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - deploy to staging
      - deploy to qa
    - get: version
      passed:
      - deploy to staging
      - deploy to qa
      trigger: true
    timeout: 1h
  - put: Docker Registry
    params:
      build: git/e2e/versioned
      build_args:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: b
      tag_as_latest: true
      tag_file: version/number
    timeout: 1h
    attempts: 1
  on_failure:
    aggregate:
    - put: slack-notification
      params:
        channel: '#ee-re'
        icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
        text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        username: Halfpipe
- name: run notify.sh
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - push to docker registry
    - get: version
      passed:
      - push to docker registry
      trigger: true
    timeout: 1h
  - task: run notify.sh
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: blah
          repository: busy
          tag: latest
          username: michiel
      params:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: b
      run:
        path: /bin/sh
        args:
        - -c
        - |
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          ./notify.sh
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/versioned
      inputs:
      - name: git
      - name: version
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  on_failure:
    aggregate:
    - put: slack-notification
      params:
        channel: '#ee-re'
        icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
        text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        username: Halfpipe
- name: docker-compose
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - run notify.sh
    - get: version
      passed:
      - run notify.sh
      trigger: true
    timeout: 1h
  - task: docker-compose
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
          tag: stable
          username: _json_key
      params:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        GCR_PRIVATE_KEY: ((gcr.private_key))
        HALFPIPE_CACHE_TEAM: engineering-enablement
      run:
        path: docker.sh
        args:
        - -c
        - |
          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2
            if [ -d $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH/$ARTIFACT
              cp -r $ARTIFACT/. $ARTIFACT_OUT_PATH/$ARTIFACT/
            elif [ -f $ARTIFACT ] ; then
              ARTIFACT_DIR=$(dirname $ARTIFACT)
              mkdir -p $ARTIFACT_OUT_PATH/$ARTIFACT_DIR
              cp $ARTIFACT $ARTIFACT_OUT_PATH/$ARTIFACT_DIR
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io
          docker-compose  run -e A -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME -e BUILD_VERSION -e GIT_REVISION -e HALFPIPE_CACHE_TEAM -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache app

          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact docker-compose.yml ../../../artifacts-out-failure
            exit 1
          fi
        dir: git/e2e/versioned
      inputs:
      - name: git
      - name: version
      outputs:
      - name: artifacts-out-failure
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  on_failure:
    aggregate:
    - put: artifacts-on-failure
      resource: artifacts-engineering-enablement-test-on-failure
      params:
        folder: artifacts-out-failure
        postfix: failure
        version_file: git/.git/ref
    - put: slack-notification
      params:
        channel: '#ee-re'
        icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
        text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        username: Halfpipe
- name: another-c-name
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - docker-compose
    - get: version
      passed:
      - docker-compose
      trigger: true
    timeout: 1h
  - task: another-c-name
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
          tag: stable
          username: _json_key
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        CONSUMER_GIT_KEY: ((github.private_key))
        CONSUMER_GIT_URI: git@github.com:springernature/c-consumer
        CONSUMER_HOST: c-host
        CONSUMER_PATH: ""
        CONSUMER_SCRIPT: c-script
        DOCKER_COMPOSE_SERVICE: potato
        GCR_PRIVATE_KEY: ((gcr.private_key))
        GIT_CLONE_OPTIONS: ""
        K: value
        K1: value1
        PROVIDER_HOST: p-host
        PROVIDER_HOST_KEY: TEST_DEPLOYED_HOST
        PROVIDER_NAME: test
      run:
        path: docker.sh
        args:
        - -c
        - |
          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io

          # write git key to file
          echo "${CONSUMER_GIT_KEY}" > .gitkey
          chmod 600 .gitkey

          set -x

          # get current revision of consumer
          REVISION=$(curl "${CONSUMER_HOST}/internal/version" | jq -r '.revision')

          # clone consumer into "consumer-repo" dir
          GIT_SSH_COMMAND="ssh -o StrictHostKeychecking=no -i .gitkey" git clone ${GIT_CLONE_OPTIONS} ${CONSUMER_GIT_URI} consumer-repo
          cd consumer-repo/${CONSUMER_PATH}

          # checkout revision
          git checkout ${REVISION}

          # run the tests with docker-compose
          # note: old system reads CF manifest env vars and sets them all here
          docker-compose run --no-deps \
            --entrypoint "${CONSUMER_SCRIPT}" \
            -e DEPENDENCY_NAME=${PROVIDER_NAME} \
            -e ${PROVIDER_HOST_KEY}=${PROVIDER_HOST} -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME -e K -e K1 \
            ${DOCKER_COMPOSE_SERVICE:-code}

          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/versioned
      inputs:
      - name: git
      - name: version
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  on_failure:
    aggregate:
    - put: slack-notification
      params:
        channel: '#ee-re'
        icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
        text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        username: Halfpipe
- name: deploy-ml-zip
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - another-c-name
    - get: version
      passed:
      - another-c-name
      trigger: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: platformengineering/gcp-resource
          tag: stable
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: engineering-enablement/test
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
  - task: deploy-ml-zip
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-ml-deploy
          tag: latest
          username: _json_key
      params:
        APP_NAME: test
        DEPLOY_ZIP: target/xquery.zip
        MARKLOGIC_HOST: ml.dev.springer-sbm.com
      run:
        path: /bin/sh
        args:
        - -c
        - |
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          # Copying in artifacts from previous task
          cp -r ../../../artifacts/. .

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          /ml-deploy/deploy-local-zip
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/versioned
      inputs:
      - name: git
      - name: artifacts
      - name: version
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  on_failure:
    aggregate:
    - put: slack-notification
      params:
        channel: '#ee-re'
        icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
        text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        username: Halfpipe
- name: Deploy ml-modules artifact
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - deploy-ml-zip
    - get: version
      passed:
      - deploy-ml-zip
      trigger: true
    timeout: 1h
  - task: Deploy ml-modules artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-ml-deploy
          tag: latest
          username: _json_key
      params:
        APP_NAME: my-app
        APP_VERSION: v1
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        MARKLOGIC_HOST: ml.dev.springer-sbm.com,ml.qa1.springer-sbm.com
        ML_MODULES_VERSION: "2.1425"
      run:
        path: /bin/sh
        args:
        - -c
        - |
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          /ml-deploy/deploy-ml-modules
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/versioned
      inputs:
      - name: git
      - name: version
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  on_failure:
    aggregate:
    - put: slack-notification
      params:
        channel: '#ee-re'
        icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
        text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
        username: Halfpipe

