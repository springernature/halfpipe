# Generated using halfpipe cli version 0.0.0-DEV
resources:
- name: git
  type: git
  source:
    branch: master
    paths:
    - e2e/artifacts
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  check_every: 10m
- name: artifacts
  type: gcp-resource
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-artifacts
    json_key: ((halfpipe-artifacts.private_key))
  check_every: 24h
- name: artifacts-on-failure
  type: gcp-resource
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-artifacts
    json_key: ((halfpipe-artifacts.private_key))
  check_every: 24h
- name: halfpipe-fly
  type: docker-image
  source:
    password: verysecret
    repository: springerplatformengineering/halfpipe-fly
    username: rob
  check_every: 24h
- name: CF snpaas pe staging
  type: cf-resource
  source:
    api: ((cloudfoundry.api-snpaas))
    org: pe
    password: very-secret
    space: staging
    username: michiel
  check_every: 24h
resource_types:
- name: gcp-resource
  type: registry-image
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/gcp-resource
    tag: stable
    username: _json_key
- name: cf-resource
  type: registry-image
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/cf-resource-v2
    tag: stable
    username: _json_key
jobs:
- name: create-artifact
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  on_failure:
    in_parallel:
      steps:
      - put: artifacts-on-failure
        params:
          folder: artifacts-out-failure
          postfix: failure
          version_file: git/.git/ref
        attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: create-artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: alpine
          tag: latest
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      run:
        path: /bin/sh
        args:
        - -c
        - |-
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../.git/ref`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact .halfpipe.io.yml ../../../artifacts-out-failure/e2e/artifacts
            copyArtifact ../../.halfpipe.io.yml ../../../artifacts-out-failure
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact someFile ../../../artifacts-out/e2e/artifacts
          copyArtifact ../parentDir/someFile2 ../../../artifacts-out/e2e/parentDir
        dir: git/e2e/artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts-out
      - name: artifacts-out-failure
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  - put: artifacts
    params:
      folder: artifacts-out
      version_file: git/.git/ref
    timeout: 1h
    attempts: 2
- name: read-artifact
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - create-artifact
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-artifacts
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
    attempts: 2
  - task: read-artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: alpine
          tag: latest
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      run:
        path: /bin/sh
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          # Copying in artifacts from previous task
          cp -r ../../../artifacts/. ../..

          export GIT_REVISION=`cat ../../.git/ref`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/artifacts
      inputs:
      - name: git
      - name: artifacts
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
- name: deploy to staging
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    put: cf halfpipe-cleanup
    resource: CF snpaas pe staging
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/artifacts/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - read-artifact
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-artifacts
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
    attempts: 2
  - put: cf halfpipe-push
    resource: CF snpaas pe staging
    params:
      appPath: git/e2e/artifacts
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/artifacts/manifest.yml
      testDomain: springernature.app
      timeout: 1h
      vars:
        A: "0.1"
        B: "false"
    timeout: 1h
    attempts: 2
  - put: cf halfpipe-check
    resource: CF snpaas pe staging
    params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/artifacts/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
  - in_parallel:
      steps:
      - do:
        - task: run a
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                password: ((halfpipe-gcr.private_key))
                repository: eu.gcr.io/halfpipe-io/halfpipe-fly
                tag: latest
                username: _json_key
            params:
              A: blah
              ARTIFACTORY_PASSWORD: ((artifactory.password))
              ARTIFACTORY_URL: ((artifactory.url))
              ARTIFACTORY_USERNAME: ((artifactory.username))
              TEST_ROUTE: halfpipe-example-kotlin-dev-staging-CANDIDATE.springernature.app
            run:
              path: /bin/sh
              args:
              - -c
              - |
                if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                  echo "WARNING: Bash is not present in the docker image"
                  echo "If your script depends on bash you will get a strange error message like:"
                  echo "  sh: yourscript.sh: command not found"
                  echo "To fix, make sure your docker image contains bash!"
                  echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                  echo ""
                  echo ""
                fi

                if [ -e /etc/alpine-release ]
                then
                  echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                  echo "There is a known issue where DNS resolving does not work as expected"
                  echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                  echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                  echo "we recommend debian:stretch-slim as an alternative"
                  echo ""
                  echo ""
                fi

                # Copying in artifacts from previous task
                cp -r ../../../artifacts/. ../..

                export GIT_REVISION=`cat ../../.git/ref`

                ./a
                EXIT_STATUS=$?
                if [ $EXIT_STATUS != 0 ] ; then
                  exit 1
                fi
              dir: git/e2e/artifacts
            inputs:
            - name: git
            - name: artifacts
            caches:
            - path: ../../../var/halfpipe/cache
            - path: ../../../halfpipe-cache
          attempts: 1
    timeout: 1h
  - put: cf halfpipe-promote
    resource: CF snpaas pe staging
    params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/artifacts/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    timeout: 1h
    attempts: 2
- name: push to docker registry
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - deploy to staging
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-artifacts
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
    attempts: 2
  - task: Copying git repo and artifacts to a temporary build dir
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: /bin/sh
        args:
        - -c
        - |-
          cp -r git/. docker_build
          cp -r artifacts/. docker_build
      inputs:
      - name: git
      - name: artifacts
      outputs:
      - name: docker_build
    timeout: 1h
  - put: halfpipe-fly
    params:
      build: docker_build/e2e/artifacts
      build_args:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: b
      dockerfile: docker_build/e2e/artifacts/Dockerfile
      tag_as_latest: true
      tag_file: git/.git/ref
    timeout: 1h
    attempts: 1
- name: docker-compose
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  on_failure:
    in_parallel:
      steps:
      - put: artifacts-on-failure
        params:
          folder: artifacts-out-failure
          postfix: failure
          version_file: git/.git/ref
        attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - push to docker registry
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-artifacts
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
    attempts: 2
  - task: docker-compose
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
          tag: stable
          username: _json_key
      params:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        GCR_PRIVATE_KEY: ((halfpipe-gcr.private_key))
        HALFPIPE_CACHE_TEAM: halfpipe-team
      run:
        path: docker.sh
        args:
        - -c
        - |
          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          # Copying in artifacts from previous task
          cp -r ../../../artifacts/. ../..

          export GIT_REVISION=`cat ../../.git/ref`

          \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io
          docker-compose  run -e A -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME -e GIT_REVISION -e HALFPIPE_CACHE_TEAM -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache app

          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact docker-compose.yml ../../../artifacts-out-failure/e2e/artifacts
            exit 1
          fi
        dir: git/e2e/artifacts
      inputs:
      - name: git
      - name: artifacts
      outputs:
      - name: artifacts-out-failure
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
- name: deploy-ml-zip
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - docker-compose
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-artifacts
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
    attempts: 2
  - task: deploy-ml-zip
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-ml-deploy
          tag: latest
          username: _json_key
      params:
        APP_NAME: halfpipe-e2e-artifacts
        DEPLOY_ZIP: target/xquery.zip
        MARKLOGIC_HOST: ml.dev.springer-sbm.com
        MARKLOGIC_PASSWORD: ((halfpipe-ml-deploy.password))
        MARKLOGIC_USERNAME: ((halfpipe-ml-deploy.username))
        USE_BUILD_VERSION: "false"
      run:
        path: /bin/sh
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          # Copying in artifacts from previous task
          cp -r ../../../artifacts/. ../..

          export GIT_REVISION=`cat ../../.git/ref`

          /ml-deploy/deploy-local-zip
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/artifacts
      inputs:
      - name: git
      - name: artifacts
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1

