# Generated using halfpipe cli version 0.0.0-DEV
resources:
- name: git
  type: git
  source:
    branch: master
    paths:
    - e2e/deploy-cf-rolling
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  check_every: 10m
- name: rolling cf dev-api halfpipe-team dev
  type: cf-resource
  source:
    api: dev-api
    org: halfpipe-team
    password: very-secret
    space: dev
    username: michiel
  check_every: 24h
resource_types:
- name: cf-resource
  type: registry-image
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/cf-resource-v2
    tag: stable
    username: _json_key
jobs:
- name: deploy to cf without the jazz
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 5m
  - put: cf rolling deploy
    resource: rolling cf dev-api halfpipe-team dev
    params:
      appPath: git/e2e/deploy-cf-rolling
      cliVersion: cf7
      command: halfpipe-rolling-deploy
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/deploy-cf-rolling/manifest.yml
      timeout: 5m
    timeout: 5m
    attempts: 2
- name: deploy to cf
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - deploy to cf without the jazz
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 5m
  - put: deploy test app
    resource: rolling cf dev-api halfpipe-team dev
    params:
      appPath: git/e2e/deploy-cf-rolling
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      instances: 1
      manifestPath: git/e2e/deploy-cf-rolling/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    timeout: 5m
    attempts: 2
  - in_parallel:
      steps:
      - do:
        - task: pre promote step
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                password: ((halfpipe-gcr.private_key))
                repository: eu.gcr.io/halfpipe-io/halfpipe-fly
                tag: latest
                username: _json_key
            params:
              A: blah
              ARTIFACTORY_PASSWORD: ((artifactory.password))
              ARTIFACTORY_URL: ((artifactory.url))
              ARTIFACTORY_USERNAME: ((artifactory.username))
              TEST_ROUTE: halfpipe-example-kotlin-dev-dev-CANDIDATE.some.random.domain.com
            run:
              path: /bin/sh
              args:
              - -c
              - |
                if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                  echo "WARNING: Bash is not present in the docker image"
                  echo "If your script depends on bash you will get a strange error message like:"
                  echo "  sh: yourscript.sh: command not found"
                  echo "To fix, make sure your docker image contains bash!"
                  echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                  echo ""
                  echo ""
                fi

                if [ -e /etc/alpine-release ]
                then
                  echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                  echo "There is a known issue where DNS resolving does not work as expected"
                  echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                  echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                  echo "we recommend debian:buster-slim as an alternative"
                  echo ""
                  echo ""
                fi

                export GIT_REVISION=`cat ../../.git/ref`

                ./smoke-test.sh
                EXIT_STATUS=$?
                if [ $EXIT_STATUS != 0 ] ; then
                  exit 1
                fi
              dir: git/e2e/deploy-cf-rolling
            inputs:
            - name: git
            caches:
            - path: ../../../var/halfpipe/cache
            - path: ../../../halfpipe-cache
          attempts: 1
      fail_fast: true
    timeout: 5m
  - put: cf rolling deploy
    resource: rolling cf dev-api halfpipe-team dev
    params:
      appPath: git/e2e/deploy-cf-rolling
      cliVersion: cf7
      command: halfpipe-rolling-deploy
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/deploy-cf-rolling/manifest.yml
      timeout: 5m
    timeout: 5m
    attempts: 2
  - put: remove test app
    resource: rolling cf dev-api halfpipe-team dev
    params:
      command: halfpipe-delete-test
      manifestPath: git/e2e/deploy-cf-rolling/manifest.yml
    timeout: 5m
    attempts: 2
