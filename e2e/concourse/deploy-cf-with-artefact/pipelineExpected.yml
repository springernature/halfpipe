# Generated using halfpipe cli version 0.0.0-DEV
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: make binary
  plan:
  - attempts: 2
    get: git
    timeout: 15m
    trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        name: ""
        source:
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: ubuntu
          tag: latest
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts-out
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        RUNNING_IN_CI: "true"
      platform: linux
      run:
        args:
        - -c
        - |-
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../../.git/ref`

          \make
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact build/linux/binary ../../../../artifacts-out/e2e/concourse/deploy-cf-with-artefact/build/linux
        dir: git/e2e/concourse/deploy-cf-with-artefact
        path: /bin/sh
    task: make-binary
    timeout: 1h
  - attempts: 2
    no_get: true
    params:
      folder: artifacts-out
      version_file: git/.git/ref
    put: artifacts
    timeout: 15m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: deploy to cf
  plan:
  - attempts: 2
    get: git
    passed:
    - make binary
    timeout: 15m
    trigger: true
  - attempts: 2
    config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-deploy-cf
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      platform: linux
      run:
        args:
        - .
        dir: artifacts
        path: /opt/resource/download
    task: get-artifact
    timeout: 15m
  - attempts: 2
    no_get: true
    params:
      appPath: artifacts/e2e/concourse/deploy-cf-with-artefact/build/linux/binary
      cliVersion: cf6
      command: halfpipe-all
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/concourse/deploy-cf-with-artefact/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    put: halfpipe-all
    resource: cf-dev-api-halfpipe-team-dev
    timeout: 5m
  serial: true
resource_types:
- check_every: 24h0m0s
  name: gcp-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/gcp-resource
    tag: stable
    username: _json_key
  type: registry-image
- check_every: 24h0m0s
  name: cf-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/cf-resource-v2
    username: _json_key
  type: registry-image
resources:
- check_every: 10m0s
  name: git
  source:
    branch: main
    paths:
    - e2e/concourse/deploy-cf
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 24h0m0s
  name: artifacts
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-deploy-cf
    json_key: ((halfpipe-artifacts.private_key))
  type: gcp-resource
- check_every: 24h0m0s
  name: cf-dev-api-halfpipe-team-dev
  source:
    api: dev-api
    org: halfpipe-team
    password: very-secret
    space: dev
    username: michiel
  type: cf-resource
