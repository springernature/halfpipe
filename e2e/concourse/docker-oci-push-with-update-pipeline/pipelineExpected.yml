# Generated using halfpipe cli version 0.0.0-DEV
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: update
  plan:
  - attempts: 2
    get: git
    timeout: 15m
    trigger: true
  - attempts: 2
    config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: eu.gcr.io/halfpipe-io/halfpipe-auto-update
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      params:
        CONCOURSE_PASSWORD: ((concourse.password))
        CONCOURSE_TEAM: ((concourse.team))
        CONCOURSE_URL: ((concourse.url))
        CONCOURSE_USERNAME: ((concourse.username))
        HALFPIPE_DOMAIN: halfpipe.io
        HALFPIPE_FILE_PATH: .halfpipe.io
        HALFPIPE_PROJECT: halfpipe-io
        PIPELINE_NAME: docker-push-with-update-pipeline
      platform: linux
      run:
        dir: git/e2e/concourse/docker-oci-push-with-update-pipeline
        path: update-pipeline
    task: update
    timeout: 15m
  - attempts: 2
    no_get: true
    params:
      bump: minor
    put: version
    timeout: 15m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: push to docker registry
  plan:
  - attempts: 2
    in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - update
      - get: version
        passed:
        - update
        trigger: true
    timeout: 15m
  - config:
      image_resource:
        name: ""
        source:
          repository: alpine
        type: docker-image
      inputs:
      - name: git
      - name: version
      outputs:
      - name: tagList
      platform: linux
      run:
        args:
        - -c
        - |-
          GIT_REF=`[ -f git/.git/ref ] && cat git/.git/ref || true`
          VERSION=`[ -f version/version ] && cat version/version || true`
          printf "%s %s latest" "$GIT_REF" "$VERSION" > tagList/tagList
          printf "Image will be tagged with: %s\n" $(cat tagList/tagList)
        path: /bin/sh
    task: create-tag-list
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          repository: concourse/oci-build-task
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: image
      params:
        BUILD_ARG_A: a
        BUILD_ARG_ARTIFACTORY_PASSWORD: ((artifactory.password))
        BUILD_ARG_ARTIFACTORY_URL: ((artifactory.url))
        BUILD_ARG_ARTIFACTORY_USERNAME: ((artifactory.username))
        BUILD_ARG_B: b
        BUILD_ARG_RUNNING_IN_CI: "true"
        CONTEXT: git/e2e/concourse/docker-oci-push-with-update-pipeline
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
        DOCKERFILE: git/e2e/concourse/docker-oci-push-with-update-pipeline/Dockerfile
      platform: linux
      run:
        args:
        - -c
        - |-
          mkdir ~/.docker
          echo $DOCKER_CONFIG_JSON > ~/.docker/config.json
          build
        path: /bin/sh
    privileged: true
    task: build
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          repository: aquasec/trivy
        type: docker-image
      inputs:
      - name: git
      - name: image
      platform: linux
      run:
        args:
        - -c
        - |-
          [ -f .trivyignore ] && echo "Ignoring the following CVE's due to .trivyignore" || true
          [ -f .trivyignore ] && cat .trivyignore; echo || true
          trivy image --timeout 15m --ignore-unfixed --severity CRITICAL --exit-code 0 --input ../../../../image/image.tar
        dir: git/e2e/concourse/docker-oci-push-with-update-pipeline
        path: /bin/sh
    task: trivy
    timeout: 1h
  - no_get: true
    params:
      additional_tags: tagList/tagList
      image: image/image.tar
    put: image1
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: push to docker registry with git ref
  plan:
  - attempts: 2
    in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - push to docker registry
      - get: version
        passed:
        - push to docker registry
        trigger: true
    timeout: 15m
  - config:
      image_resource:
        name: ""
        source:
          repository: alpine
        type: docker-image
      inputs:
      - name: git
      - name: version
      outputs:
      - name: tagList
      platform: linux
      run:
        args:
        - -c
        - |-
          GIT_REF=`[ -f git/.git/ref ] && cat git/.git/ref || true`
          VERSION=`[ -f version/version ] && cat version/version || true`
          printf "%s %s latest" "$GIT_REF" "$VERSION" > tagList/tagList
          printf "Image will be tagged with: %s\n" $(cat tagList/tagList)
        path: /bin/sh
    task: create-tag-list
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          repository: concourse/oci-build-task
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: image
      params:
        BUILD_ARG_A: a
        BUILD_ARG_ARTIFACTORY_PASSWORD: ((artifactory.password))
        BUILD_ARG_ARTIFACTORY_URL: ((artifactory.url))
        BUILD_ARG_ARTIFACTORY_USERNAME: ((artifactory.username))
        BUILD_ARG_B: b
        BUILD_ARG_RUNNING_IN_CI: "true"
        CONTEXT: git/e2e/concourse/docker-oci-push-with-update-pipeline
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
        DOCKERFILE: git/e2e/concourse/docker-oci-push-with-update-pipeline/Dockerfile
      platform: linux
      run:
        args:
        - -c
        - |-
          mkdir ~/.docker
          echo $DOCKER_CONFIG_JSON > ~/.docker/config.json
          build
        path: /bin/sh
    privileged: true
    task: build
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          repository: aquasec/trivy
        type: docker-image
      inputs:
      - name: git
      - name: image
      platform: linux
      run:
        args:
        - -c
        - |-
          [ -f .trivyignore ] && echo "Ignoring the following CVE's due to .trivyignore" || true
          [ -f .trivyignore ] && cat .trivyignore; echo || true
          trivy image --timeout 15m --ignore-unfixed --severity CRITICAL --exit-code 0 --input ../../../../image/image.tar
        dir: git/e2e/concourse/docker-oci-push-with-update-pipeline
        path: /bin/sh
    task: trivy
    timeout: 1h
  - no_get: true
    params:
      additional_tags: tagList/tagList
      image: image/image.tar
    put: image2
    timeout: 1h
  serial: true
resources:
- check_every: 10m0s
  name: git
  source:
    branch: main
    paths:
    - e2e/concourse/docker-oci-push-with-update-pipeline
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 24h0m0s
  name: version
  source:
    bucket: ((halfpipe-semver.bucket))
    driver: gcs
    json_key: ((halfpipe-semver.private_key))
    key: halfpipe-team-docker-push-with-update-pipeline
  type: semver
- check_every: 24h0m0s
  name: image1
  source:
    password: verysecret
    repository: springerplatformengineering/image1
    username: rob
  type: registry-image
- check_every: 24h0m0s
  name: image2
  source:
    password: verysecret
    repository: springerplatformengineering/image2
    username: rob
  type: registry-image
