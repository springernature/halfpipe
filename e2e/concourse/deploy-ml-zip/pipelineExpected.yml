# Generated using halfpipe cli version 0.0.0-DEV
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: create zip for ml task
  plan:
  - attempts: 2
    get: git
    timeout: 15m
    trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        name: ""
        source:
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: alpine
          tag: latest
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts-out
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        RUNNING_IN_CI: "true"
      platform: linux
      run:
        args:
        - -c
        - |-
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../../.git/ref`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact ml.zip ../../../../artifacts-out/e2e/concourse/deploy-ml-zip
        dir: git/e2e/concourse/deploy-ml-zip
        path: /bin/sh
    task: create-zip-for-ml-task
    timeout: 1h
  - attempts: 2
    no_get: true
    params:
      folder: artifacts-out
      version_file: git/.git/ref
    put: artifacts
    timeout: 15m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: deploy-ml-zip
  plan:
  - attempts: 2
    get: git
    passed:
    - create zip for ml task
    timeout: 15m
    trigger: true
  - attempts: 2
    config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-deploy-ml-zip
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      platform: linux
      run:
        args:
        - .
        dir: artifacts
        path: /opt/resource/download
    task: get-artifact
    timeout: 15m
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: eu.gcr.io/halfpipe-io/halfpipe-ml-deploy
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: artifacts
      params:
        APP_NAME: halfpipe-e2e-deploy-ml-zip
        DEPLOY_ZIP: target/xquery.zip
        MARKLOGIC_HOST: ml.dev.springer-sbm.com
        MARKLOGIC_PASSWORD: ((halfpipe-ml-deploy.password))
        MARKLOGIC_USERNAME: ((halfpipe-ml-deploy.username))
        USE_BUILD_VERSION: "true"
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          # Copying in artifacts from previous task
          cp -r ../../../../artifacts/. ../../..

          export GIT_REVISION=`cat ../../../.git/ref`

          /ml-deploy/deploy-local-zip
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/concourse/deploy-ml-zip
        path: /bin/sh
    task: deploy-ml-zip
    timeout: 1h
  serial: true
resource_types:
- check_every: 24h0m0s
  name: gcp-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/gcp-resource
    tag: stable
    username: _json_key
  type: registry-image
resources:
- check_every: 10m0s
  name: git
  source:
    branch: main
    paths:
    - e2e/concourse/deploy-ml-zip
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 24h0m0s
  name: artifacts
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-deploy-ml-zip
    json_key: ((halfpipe-artifacts.private_key))
  type: gcp-resource
