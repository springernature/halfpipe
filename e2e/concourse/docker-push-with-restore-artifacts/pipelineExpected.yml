# Generated using halfpipe cli version 0.0.0-DEV from file e2e/concourse/docker-push-with-restore-artifacts/.halfpipe.io for team halfpipe-team
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: update
  plan:
  - attempts: 2
    get: git
    timeout: 15m
    trigger: true
  - attempts: 2
    config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: eu.gcr.io/halfpipe-io/halfpipe-auto-update
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      params:
        CONCOURSE_PASSWORD: ((concourse.password))
        CONCOURSE_TEAM: ((concourse.team))
        CONCOURSE_URL: ((concourse.url))
        CONCOURSE_USERNAME: ((concourse.username))
        HALFPIPE_DOMAIN: halfpipe.io
        HALFPIPE_FILE_PATH: .halfpipe.io
        HALFPIPE_PROJECT: halfpipe-io
        PIPELINE_NAME: docker-push-with-update-pipeline
      platform: linux
      run:
        dir: git/e2e/concourse/docker-push-with-restore-artifacts
        path: update-pipeline
    task: update
    timeout: 15m
  - attempts: 2
    no_get: true
    params:
      bump: minor
    put: version
    timeout: 15m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: run build.sh
  plan:
  - attempts: 2
    in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - update
      - get: version
        passed:
        - update
        trigger: true
    timeout: 15m
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        name: ""
        source:
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: alpine
          tag: latest
        type: registry-image
      inputs:
      - name: git
      - name: version
      outputs:
      - name: artifacts-out
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        RUNNING_IN_CI: "true"
      platform: linux
      run:
        args:
        - -c
        - |-
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../../.git/ref`
          export BUILD_VERSION=`cat ../../../../version/version`

          ./build.sh
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact file1 ../../../../artifacts-out/e2e/concourse/docker-push-with-restore-artifacts
        dir: git/e2e/concourse/docker-push-with-restore-artifacts
        path: /bin/sh
    task: run-build.sh
    timeout: 1h
  - attempts: 2
    no_get: true
    params:
      folder: artifacts-out
      version_file: git/.git/ref
    put: artifacts
    timeout: 15m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: push to docker registry
  plan:
  - attempts: 2
    in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - run build.sh
      - get: version
        passed:
        - run build.sh
        trigger: true
    timeout: 15m
  - attempts: 2
    config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/docker-push-with-update-pipeline
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      platform: linux
      run:
        args:
        - .
        dir: artifacts
        path: /opt/resource/download
    task: get-artifact
    timeout: 15m
  - config:
      image_resource:
        name: ""
        source:
          repository: alpine
        type: registry-image
      inputs:
      - name: git
      - name: artifacts
      outputs:
      - name: docker_build
      platform: linux
      run:
        args:
        - -c
        - |-
          cp -r git/. docker_build
          cp -r artifacts/. docker_build
        path: /bin/sh
    task: copying-git-repo-and-artifacts-to-a-temporary-build-dir
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          repository: alpine
        type: docker-image
      inputs:
      - name: git
      - name: version
      outputs:
      - name: tagList
      platform: linux
      run:
        args:
        - -c
        - |-
          GIT_REF=`[ -f git/.git/ref ] && cat git/.git/ref || true`
          VERSION=`[ -f version/version ] && cat version/version || true`
          printf "%s %s latest" "$GIT_REF" "$VERSION" > tagList/tagList
          printf "Image will be tagged with: %s\n" $(cat tagList/tagList)
        path: /bin/sh
    task: create-tag-list
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-buildx
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: tagList
      - name: docker_build
      params:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: b
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
        RUNNING_IN_CI: "true"
      platform: linux
      run:
        args:
        - -c
        - |-
          echo $DOCKER_CONFIG_JSON > ~/.docker/config.json
          echo $ docker buildx build \
            -f docker_build/e2e/concourse/docker-push-with-restore-artifacts/Dockerfile \
            --push \
            --provenance false \
            --platform linux/amd64 \
            --tag eu.gcr.io/halfpipe-io/cache/springerplatformengineering/image1:$(cat git/.git/ref) \
            --build-arg A \
            --build-arg ARTIFACTORY_PASSWORD \
            --build-arg ARTIFACTORY_URL \
            --build-arg ARTIFACTORY_USERNAME \
            --build-arg B \
            --build-arg RUNNING_IN_CI \
            --secret id=ARTIFACTORY_PASSWORD \
            --secret id=ARTIFACTORY_URL \
            --secret id=ARTIFACTORY_USERNAME \
            docker_build/e2e/concourse/docker-push-with-restore-artifacts
          docker buildx build \
            -f docker_build/e2e/concourse/docker-push-with-restore-artifacts/Dockerfile \
            --push \
            --provenance false \
            --platform linux/amd64 \
            --tag eu.gcr.io/halfpipe-io/cache/springerplatformengineering/image1:$(cat git/.git/ref) \
            --build-arg A \
            --build-arg ARTIFACTORY_PASSWORD \
            --build-arg ARTIFACTORY_URL \
            --build-arg ARTIFACTORY_USERNAME \
            --build-arg B \
            --build-arg RUNNING_IN_CI \
            --secret id=ARTIFACTORY_PASSWORD \
            --secret id=ARTIFACTORY_URL \
            --secret id=ARTIFACTORY_USERNAME \
            docker_build/e2e/concourse/docker-push-with-restore-artifacts
        path: /bin/sh
    privileged: true
    task: build
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          repository: aquasec/trivy
        type: docker-image
      inputs:
      - name: git
      - name: docker_build
      params:
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
      platform: linux
      run:
        args:
        - -c
        - |-
          [ -f .trivyignore ] && echo "Ignoring the following CVE's due to .trivyignore" || true
          [ -f .trivyignore ] && cat .trivyignore; echo || true
          trivy image --timeout 15m --ignore-unfixed --severity CRITICAL --scanners vuln --exit-code 0 eu.gcr.io/halfpipe-io/cache/springerplatformengineering/image1:$(cat ../../../.git/ref) || true
        dir: docker_build/e2e/concourse/docker-push-with-restore-artifacts
        path: /bin/sh
    task: trivy
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-buildx
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: tagList
      params:
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
      platform: linux
      run:
        args:
        - -c
        - |-
          echo $DOCKER_CONFIG_JSON > ~/.docker/config.json
          for tag in $(cat tagList/tagList) ; do docker buildx imagetools create eu.gcr.io/halfpipe-io/cache/springerplatformengineering/image1:$(cat git/.git/ref) --tag springerplatformengineering/image1:$tag; done
        path: /bin/sh
    privileged: true
    task: publish-final-image
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: push to docker registry with git ref
  plan:
  - attempts: 2
    in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - push to docker registry
      - get: version
        passed:
        - push to docker registry
        trigger: true
    timeout: 15m
  - attempts: 2
    config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/docker-push-with-update-pipeline
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      platform: linux
      run:
        args:
        - .
        dir: artifacts
        path: /opt/resource/download
    task: get-artifact
    timeout: 15m
  - config:
      image_resource:
        name: ""
        source:
          repository: alpine
        type: registry-image
      inputs:
      - name: git
      - name: artifacts
      outputs:
      - name: docker_build
      platform: linux
      run:
        args:
        - -c
        - |-
          cp -r git/. docker_build
          cp -r artifacts/. docker_build
        path: /bin/sh
    task: copying-git-repo-and-artifacts-to-a-temporary-build-dir
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          repository: alpine
        type: docker-image
      inputs:
      - name: git
      - name: version
      outputs:
      - name: tagList
      platform: linux
      run:
        args:
        - -c
        - |-
          GIT_REF=`[ -f git/.git/ref ] && cat git/.git/ref || true`
          VERSION=`[ -f version/version ] && cat version/version || true`
          printf "%s %s latest" "$GIT_REF" "$VERSION" > tagList/tagList
          printf "Image will be tagged with: %s\n" $(cat tagList/tagList)
        path: /bin/sh
    task: create-tag-list
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-buildx
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: tagList
      - name: docker_build
      params:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: b
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
        RUNNING_IN_CI: "true"
      platform: linux
      run:
        args:
        - -c
        - |-
          echo $DOCKER_CONFIG_JSON > ~/.docker/config.json
          echo $ docker buildx build \
            -f docker_build/e2e/concourse/docker-push-with-restore-artifacts/Dockerfile \
            --push \
            --provenance false \
            --platform linux/amd64 \
            --tag eu.gcr.io/halfpipe-io/cache/springerplatformengineering/image2:$(cat git/.git/ref) \
            --build-arg A \
            --build-arg ARTIFACTORY_PASSWORD \
            --build-arg ARTIFACTORY_URL \
            --build-arg ARTIFACTORY_USERNAME \
            --build-arg B \
            --build-arg RUNNING_IN_CI \
            --secret id=ARTIFACTORY_PASSWORD \
            --secret id=ARTIFACTORY_URL \
            --secret id=ARTIFACTORY_USERNAME \
            docker_build/e2e/concourse/docker-push-with-restore-artifacts
          docker buildx build \
            -f docker_build/e2e/concourse/docker-push-with-restore-artifacts/Dockerfile \
            --push \
            --provenance false \
            --platform linux/amd64 \
            --tag eu.gcr.io/halfpipe-io/cache/springerplatformengineering/image2:$(cat git/.git/ref) \
            --build-arg A \
            --build-arg ARTIFACTORY_PASSWORD \
            --build-arg ARTIFACTORY_URL \
            --build-arg ARTIFACTORY_USERNAME \
            --build-arg B \
            --build-arg RUNNING_IN_CI \
            --secret id=ARTIFACTORY_PASSWORD \
            --secret id=ARTIFACTORY_URL \
            --secret id=ARTIFACTORY_USERNAME \
            docker_build/e2e/concourse/docker-push-with-restore-artifacts
        path: /bin/sh
    privileged: true
    task: build
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          repository: aquasec/trivy
        type: docker-image
      inputs:
      - name: git
      - name: docker_build
      params:
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
      platform: linux
      run:
        args:
        - -c
        - |-
          [ -f .trivyignore ] && echo "Ignoring the following CVE's due to .trivyignore" || true
          [ -f .trivyignore ] && cat .trivyignore; echo || true
          trivy image --timeout 15m --ignore-unfixed --severity CRITICAL --scanners vuln --exit-code 0 eu.gcr.io/halfpipe-io/cache/springerplatformengineering/image2:$(cat ../../../.git/ref) || true
        dir: docker_build/e2e/concourse/docker-push-with-restore-artifacts
        path: /bin/sh
    task: trivy
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-buildx
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: tagList
      params:
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
      platform: linux
      run:
        args:
        - -c
        - |-
          echo $DOCKER_CONFIG_JSON > ~/.docker/config.json
          for tag in $(cat tagList/tagList) ; do docker buildx imagetools create eu.gcr.io/halfpipe-io/cache/springerplatformengineering/image2:$(cat git/.git/ref) --tag springerplatformengineering/image2:$tag; done
        path: /bin/sh
    privileged: true
    task: publish-final-image
    timeout: 1h
  serial: true
resource_types:
- check_every: 24h0m0s
  name: gcp-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/gcp-resource
    tag: stable
    username: _json_key
  type: registry-image
resources:
- check_every: 10m0s
  name: git
  source:
    branch: main
    paths:
    - e2e/concourse/docker-push-with-restore-artifacts
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 24h0m0s
  name: artifacts
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/docker-push-with-update-pipeline
    json_key: ((halfpipe-artifacts.private_key))
  type: gcp-resource
- check_every: 24h0m0s
  name: version
  source:
    bucket: ((halfpipe-semver.bucket))
    driver: gcs
    json_key: ((halfpipe-semver.private_key))
    key: halfpipe-team-docker-push-with-update-pipeline
  type: semver
