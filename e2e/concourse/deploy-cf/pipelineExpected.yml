# Generated using halfpipe cli version 0.0.0-DEV
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: deploy to cf without any jazz
  plan:
  - attempts: 2
    get: git
    timeout: 15m
    trigger: true
  - attempts: 2
    no_get: true
    params:
      appPath: git/e2e/concourse/deploy-cf
      cliVersion: cf7
      command: halfpipe-all
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/concourse/deploy-cf/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    put: halfpipe-all
    resource: cf-dev-api-halfpipe-team-dev
    timeout: 5m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: deploy to cf without any jazz with cf8
  plan:
  - attempts: 2
    get: git
    passed:
    - deploy to cf without any jazz
    timeout: 15m
    trigger: true
  - attempts: 2
    no_get: true
    params:
      appPath: git/e2e/concourse/deploy-cf
      cliVersion: cf8
      command: halfpipe-all
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/concourse/deploy-cf/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    put: halfpipe-all
    resource: cf-dev-api-halfpipe-team-dev
    timeout: 5m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    attempts: 2
    no_get: true
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/concourse/deploy-cf/manifest.yml
      timeout: 5m
    put: halfpipe-cleanup
    resource: cf-dev-api-halfpipe-team-dev
    timeout: 5m
  name: deploy to cf
  plan:
  - attempts: 2
    get: git
    passed:
    - deploy to cf without any jazz with cf8
    timeout: 15m
    trigger: true
  - attempts: 2
    no_get: true
    params:
      appPath: git/e2e/concourse/deploy-cf
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/concourse/deploy-cf/manifest.yml
      preStartCommand: cf apps; cf events myapp-CANDIDATE
      testDomain: some.random.domain.com
      timeout: 5m
    put: halfpipe-push
    resource: cf-dev-api-halfpipe-team-dev
    timeout: 5m
  - attempts: 2
    no_get: true
    params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/concourse/deploy-cf/manifest.yml
      timeout: 5m
    put: halfpipe-check
    resource: cf-dev-api-halfpipe-team-dev
    timeout: 5m
  - in_parallel:
      limit: 5
      steps:
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            name: ""
            source:
              password: ((halfpipe-gcr.private_key))
              registry_mirror:
                host: eu-mirror.gcr.io
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          params:
            A: blah
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            RUNNING_IN_CI: "true"
            TEST_ROUTE: halfpipe-example-kotlin-dev-dev-CANDIDATE.some.random.domain.com
          platform: linux
          run:
            args:
            - -c
            - |
              if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              export GIT_REVISION=`cat ../../../.git/ref`

              ./smoke-test.sh
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/concourse/deploy-cf
            path: /bin/sh
        task: pre-promote-step
        timeout: 1h
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            name: ""
            source:
              password: ((halfpipe-gcr.private_key))
              registry_mirror:
                host: eu-mirror.gcr.io
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            RUNNING_IN_CI: "true"
            TEST_ROUTE: halfpipe-example-kotlin-dev-dev-CANDIDATE.some.random.domain.com
          platform: linux
          run:
            args:
            - -c
            - |
              if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              export GIT_REVISION=`cat ../../../.git/ref`

              ./smoke-test.sh
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/concourse/deploy-cf
            path: /bin/sh
        task: run-smoke-test.sh
        timeout: 1h
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            name: ""
            source:
              password: ((halfpipe-gcr.private_key))
              registry_mirror:
                host: eu-mirror.gcr.io
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            RUNNING_IN_CI: "true"
            TEST_ROUTE: halfpipe-example-kotlin-dev-dev-CANDIDATE.some.random.domain.com
          platform: linux
          run:
            args:
            - -c
            - |
              if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              export GIT_REVISION=`cat ../../../.git/ref`

              ./smoke-test.sh
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/concourse/deploy-cf
            path: /bin/sh
        task: run-smoke-test.sh-1
        timeout: 1h
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            name: ""
            source:
              password: ((halfpipe-gcr.private_key))
              registry_mirror:
                host: eu-mirror.gcr.io
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            RUNNING_IN_CI: "true"
            TEST_ROUTE: halfpipe-example-kotlin-dev-dev-CANDIDATE.some.random.domain.com
          platform: linux
          run:
            args:
            - -c
            - |
              if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              export GIT_REVISION=`cat ../../../.git/ref`

              ./smoke-test.sh
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/concourse/deploy-cf
            path: /bin/sh
        task: run-smoke-test.sh-2
        timeout: 1h
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            name: ""
            source:
              password: ((halfpipe-gcr.private_key))
              registry_mirror:
                host: eu-mirror.gcr.io
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            RUNNING_IN_CI: "true"
            TEST_ROUTE: halfpipe-example-kotlin-dev-dev-CANDIDATE.some.random.domain.com
          platform: linux
          run:
            args:
            - -c
            - |
              if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              export GIT_REVISION=`cat ../../../.git/ref`

              ./smoke-test.sh
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/concourse/deploy-cf
            path: /bin/sh
        task: run-smoke-test.sh-3
        timeout: 1h
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            name: ""
            source:
              password: ((halfpipe-gcr.private_key))
              registry_mirror:
                host: eu-mirror.gcr.io
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            RUNNING_IN_CI: "true"
            TEST_ROUTE: halfpipe-example-kotlin-dev-dev-CANDIDATE.some.random.domain.com
          platform: linux
          run:
            args:
            - -c
            - |
              if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              export GIT_REVISION=`cat ../../../.git/ref`

              ./smoke-test.sh
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/concourse/deploy-cf
            path: /bin/sh
        task: run-smoke-test.sh-4
        timeout: 1h
  - attempts: 2
    no_get: true
    params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/concourse/deploy-cf/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    put: halfpipe-promote
    resource: cf-dev-api-halfpipe-team-dev
    timeout: 5m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: deploy to cf with sso route
  plan:
  - attempts: 2
    get: git
    passed:
    - deploy to cf
    timeout: 15m
    trigger: true
  - attempts: 2
    config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/cf-resource-v2
          tag: stable
          username: _json_key
        type: registry-image
      params:
        CF_API: dev-api
        CF_ORG: halfpipe-team
        CF_PASSWORD: very-secret
        CF_SPACE: dev
        CF_USERNAME: michiel
        SSO_HOST: some-route
      platform: linux
      run:
        args:
        - -c
        - |
          cf8 login -a $CF_API -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s $CF_SPACE;
          cf8 service sso || cf8 create-user-provided-service sso -r https://ee-sso.public.springernature.app;
          cf8 route public.springernature.app -n $SSO_HOST || cf8 create-route public.springernature.app -n $SSO_HOST;
          cf8 bind-route-service public.springernature.app -n $SSO_HOST sso;
        path: /bin/bash
    task: configure-sso
    timeout: 1h
  - attempts: 2
    no_get: true
    params:
      appPath: git/e2e/concourse/deploy-cf
      cliVersion: cf6
      command: halfpipe-all
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/concourse/deploy-cf/manifest.yml
      testDomain: some.random.domain.com
      timeout: 1h
    put: halfpipe-all
    resource: cf-dev-api-halfpipe-team-dev
    timeout: 1h
  serial: true
resource_types:
- check_every: 24h0m0s
  name: cf-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/cf-resource-v2
    username: _json_key
  type: registry-image
resources:
- check_every: 10m0s
  name: git
  source:
    branch: main
    paths:
    - e2e/concourse/deploy-cf
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 24h0m0s
  name: cf-dev-api-halfpipe-team-dev
  source:
    api: dev-api
    org: halfpipe-team
    password: very-secret
    space: dev
    username: michiel
  type: cf-resource
